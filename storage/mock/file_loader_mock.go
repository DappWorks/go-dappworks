// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/dappley/go-dappley/storage (interfaces: FileStorage)

// Package storage_mock is a generated GoMock package.
package storage_mock

import (
	bytes "bytes"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockFileStorage is a mock of FileStorage interface
type MockFileStorage struct {
	ctrl     *gomock.Controller
	recorder *MockFileStorageMockRecorder
}

// MockFileStorageMockRecorder is the mock recorder for MockFileStorage
type MockFileStorageMockRecorder struct {
	mock *MockFileStorage
}

// NewMockFileStorage creates a new mock instance
func NewMockFileStorage(ctrl *gomock.Controller) *MockFileStorage {
	mock := &MockFileStorage{ctrl: ctrl}
	mock.recorder = &MockFileStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFileStorage) EXPECT() *MockFileStorageMockRecorder {
	return m.recorder
}

// ReadFromFile mocks base method
func (m *MockFileStorage) ReadFromFile() ([]byte, error) {
	ret := m.ctrl.Call(m, "ReadFromFile")
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadFromFile indicates an expected call of ReadFromFile
func (mr *MockFileStorageMockRecorder) ReadFromFile() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadFromFile", reflect.TypeOf((*MockFileStorage)(nil).ReadFromFile))
}

// SaveToFile mocks base method
func (m *MockFileStorage) SaveToFile(arg0 bytes.Buffer) {
	m.ctrl.Call(m, "SaveToFile", arg0)
}

// SaveToFile indicates an expected call of SaveToFile
func (mr *MockFileStorageMockRecorder) SaveToFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveToFile", reflect.TypeOf((*MockFileStorage)(nil).SaveToFile), arg0)
}
